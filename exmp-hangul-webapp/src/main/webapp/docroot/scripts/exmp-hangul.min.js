if (typeof exmp === "undefined") {
    var exmp = {}
}
if (typeof exmp.hangul === "undefined") {
    exmp.hangul = {}
}
if (typeof exmp.hangul.core === "undefined") {
    exmp.hangul.core = {}
}
if (typeof exmp.hangul.functor === "undefined") {
    exmp.hangul.functor = {}
}
if (typeof exmp.hangul.functor.dhtml  === "undefined") {
    exmp.hangul.functor.dhtml = {}
}
if (typeof exmp.hangul.functor.event  === "undefined") {
    exmp.hangul.functor.event = {}
}
if (typeof exmp.hangul.functor.htmltag  === "undefined") {
    exmp.hangul.functor.htmltag = {}
}
if (typeof exmp.hangul.functor.request  === "undefined") {
    exmp.hangul.functor.request = {}
}
if (typeof exmp.hangul.functor.value  === "undefined") {
    exmp.hangul.functor.value = {}
}
if (typeof exmp.hangul.mock === "undefined") {
    exmp.hangul.mock = {}
}
/* 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

///////////////////////////////////////////////////////////////////////////////
/**
 * an entry class of the application.
 * 
 * @author hiroxpepe
 */
exmp.hangul.core.Application = function(sender) {
    $(document).ready(function() {
        sender.init();
    })
}
/* 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

///////////////////////////////////////////////////////////////////////////////
/**
 * a controller class of the application.
 * 
 * @author hiroxpepe
 */
exmp.hangul.core.Controller = window; {
    
    ///////////////////////////////////////////////////////////////////////////
    // public methods
    
    /**
     * the initialization method of the Controller class.
     * this method should be called.
     */
    exmp.hangul.core.Controller.init = function() {
        
        var controller = exmp.hangul.core.Controller;
        
        controller._initializeComponent();
    }
    
    ///////////////////////////////////////////////////////////////////////////
    // event handler methods
    
    /**
     * an event handler that called when 
     * the button of tweet is clicked.
     */
    exmp.hangul.core.Controller._doTweetButtonOnClick = function() {
        
        var updateClosure = exmp.hangul.functor.request.TweetUpdateClosure;
        var replyClosure = exmp.hangul.functor.request.TweetReplyClosure;
        
        ///////////////////////////////////////////////////
        // update the tweet status.
        
        // not reply or simple reply
        if (($("#reply-status-id").val() == "") && ($("#reply-user-name").val() == "")) {
            updateClosure.execute({
                content: $("#tweet").val(),
                userId: $("#user-id").val()
            });
            return;
        }
        
        // reply to selected status
        if (($("#reply-status-id").val()) && ($("#reply-user-name").val())) {
            replyClosure.execute({
                content: $("#tweet").val(),
                userId: $("#user-id").val(),
                statusId: $("#reply-status-id").val()
            })
            return;
        }
    }
    
    /**
     * an event handler that called when 
     * the button of setting is clicked.
     */
    exmp.hangul.core.Controller._doSettingButtonOnClick = function() {
        
        var settingClosure = exmp.hangul.functor.request.SettingClosure;
        var formFactory = exmp.hangul.functor.value.TweetFormFactory;
        
        settingClosure.execute(
            formFactory.create()
        );
    }
    
    ///////////////////////////////////////////////////////////////////////////
    // private methods
    
    /**
     * initializes a div of the tabs area.
     */
    exmp.hangul.core.Controller._initializeTabsDiv = function() {
        
        $("div.tab-content div.tab").hide();
        $("div.tab-content div.tab:first").show();
        $("div.tab-content ul li:first").addClass("active");
        $("div.tab-content ul li a").click(function(){
            $("div.tab-content ul li").removeClass("active");
            $(this).parent().addClass("active");
            var currentTab = $(this).attr("href");
            $("div.tab-content div.tab").hide();
            $(currentTab).show();
            return false;
        });
    }
    
    /**
     * initializes a div of entry list.
     * an http request of ajax for get the tweet data.
     */
    exmp.hangul.core.Controller._initializeTweetListDiv = function() {
        
        var listClosure = exmp.hangul.functor.request.TweetListClosure;
        var pageUrl = location.href;
        
        if (!(pageUrl.indexOf("index.html") == -1)) {
            listClosure.execute({
                userId: $("#user-id").val()
            });
        }
    }
    
    /**
     * initializes a response list mode select of form.
     */
    exmp.hangul.core.Controller._initializeResponseListModeSelect = function() {
        $("#response-list-mode").append($('<option value="home">home</option>'));
        $("#response-list-mode").append($('<option value="user">user</option>'));
        $("#response-list-mode").append($('<option value="list">list</option>'));
        //$("#response-list-mode").val("home");
    }
    
    /**
     * initialize a component of the view class.
     */
    exmp.hangul.core.Controller._initializeComponent = function() {
        
        var controller = exmp.hangul.core.Controller;
        var eventClosure = exmp.hangul.functor.event.KeyupEventClosure; 
        var colorClosure = exmp.hangul.functor.event.KeyupColorClosure;
        
        // calls for the initialization methods.
        
        controller._initializeTabsDiv();
        
        controller._initializeTweetListDiv();
        
        controller._initializeResponseListModeSelect();
        
        // set the control's event handler.
        
        $("#tweet").keyup(function(event) {
            // clear reply param.
            // TODO: search user name?
            if ($("#tweet").val() == "") {
                $("#reply-status-id").val("")
                $("#reply-user-name").val("")
                console.log("reply-status-id: ");
                console.log("reply-user-name: ");
            }
        });
        
        $("#alphabet").keyup(function(event) {            
            eventClosure.execute({
                value: $("#alphabet").val()
            });
            
            // show color.
            colorClosure.execute(
                event
            );
        });
        
        $("#tweet-button").click(function() { 
            controller._doTweetButtonOnClick();
        });
        
        $("#setting-button").click(function() {
            controller._doSettingButtonOnClick();
        });
        
        // and do a some initialize.
        
        $("#alphabet-grid").dialog({
            width: 380
        });
    }
}
/* 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

///////////////////////////////////////////////////////////////////////////////
/**
 * a functor class of the application.
 * update the HTML table of the entry list.
 * 
 * @author hiroxpepe
 */
exmp.hangul.functor.dhtml.TweetListUpdateClosure = {
    
    ///////////////////////////////////////////////////////////////////////////
    // public methods
    
    execute: function(obj) {
        console.log("exmp.hangul.functor.dhtml.TweetListUpdateClosure#execute");
        
        var transformer = exmp.hangul.functor.htmltag.TweetListTransformer;
        
        $("#tweet-list-block").html(
            transformer.transform(
                obj
            )
        );
    }
}
/* 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

///////////////////////////////////////////////////////////////////////////////
/**
 * a functor class of the application.
 * build the event handler.
 * 
 * @author hiroxpepe
 */
exmp.hangul.functor.event.EventBuildClosure = {
    
    ///////////////////////////////////////////////////////////////////////////
    // public methods
    
    execute: function(obj) {
        
        var replyEventClosure = exmp.hangul.functor.event.ReplyEventClosure;
        var retweetEventClosure = exmp.hangul.functor.event.RetweetEventClosure;
        var favorEventClosure = exmp.hangul.functor.event.FavorEventClosure;
        
        for (var i = 0; i < obj.tweetModelList.length; i++) {
            var statusId = obj.tweetModelList[i].statusId;
            
            // set the event handler for reply.
            replyEventClosure.execute({
                statusId: statusId
            });
            
            // set the event handler for retweet.
            retweetEventClosure.execute({
                statusId: statusId
            });
            
            // set the event handler for favor.
            favorEventClosure.execute({
                statusId: statusId
            });
        }
    }
}
/* 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

///////////////////////////////////////////////////////////////////////////////
/**
 * a functor class of the application.
 * set the event handler of the favor tweet.
 * 
 * @author hiroxpepe
 */
exmp.hangul.functor.event.FavorEventClosure = {
    
    ///////////////////////////////////////////////////////////////////////////
    // public methods
    
    execute: function(obj) {
        console.log("exmp.hangul.functor.event.FavorEventClosure#execute");
        
        var favorClosure = exmp.hangul.functor.request.TweetFavorClosure;
               
        // dynamically generate an event handler.
        $("#action-favor-" + obj.statusId).click(function() {
            favorClosure.execute({
                userId: $("#user-id").val(),
                statusId: obj.statusId
            });
        });
    }
}
/* 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

///////////////////////////////////////////////////////////////////////////////
/**
 * a functor class of the application.
 * set the event handler of keyup.
 * 
 * @author hiroxpepe
 */
exmp.hangul.functor.event.KeyupColorClosure = {
    
    _tmp: "",
    
    _letterArray: [
        "g","kk","n","d","tt","r","m","b","pp","s",
        "ss","ng","j","jj","ch","k","t","p","h",
        "a","ae","ya","yae","eo","e","yeo","ye","o","wa","wae",
        "oe","yo","u","wo","we","wi","yu","eu","ui","i"
    ],
    
    ///////////////////////////////////////////////////////////////////////////
    // public methods
    
    execute: function(obj) {
        console.log("exmp.hangul.functor.event.KeyupColorClosure#execute");
        //console.log("event.keyCode: " + obj.keyCode);
        
        var valueTransformer = exmp.hangul.functor.value.InputValueTransformer
        
        var value = valueTransformer.transform({
            value: this._getChar(obj.keyCode)
        });
        
        if (value != null) {
            $("#" + this._tmp).css({
                color: "black",
                backgroundColor: "#f3f3f3"
            });
            $("#" + value).css({
                color: "red",
                backgroundColor: "pink"
            });
            this._tmp = value;
            
            // reset. TODO: need char table..
            for (var i = 0; i < this._letterArray.length; i++) {
                var letter = this._letterArray[i];
                if (value == letter) {
                    //console.log("value: " + value);
                    //console.log("letter: " + letter);
                    valueTransformer.transform({
                        value: " "
                    });
                    break;
                }
            }
        }
    },
    
    ///////////////////////////////////////////////////////////////////////////
    // private methods
    
    _getChar: function(code) {
        if (code == 65) return "a";
        if (code == 66) return "b";
        if (code == 67) return "c";
        if (code == 68) return "d";
        if (code == 69) return "e";
        if (code == 70) return "f";
        if (code == 71) return "g";
        if (code == 72) return "h";
        if (code == 73) return "i";
        if (code == 74) return "j";
        if (code == 75) return "k";
        if (code == 76) return "l";
        if (code == 77) return "m";
        if (code == 78) return "n";
        if (code == 79) return "o";
        if (code == 80) return "p";
        if (code == 81) return "q";
        if (code == 82) return "r";
        if (code == 83) return "s";
        if (code == 84) return "t";
        if (code == 85) return "u";
        if (code == 86) return "v";
        if (code == 87) return "w";
        if (code == 88) return "x";
        if (code == 89) return "y";
        if (code == 90) return "z";
        
        //space
        if (code == 32) return " ";
        // back space
        if (code == 8) return " ";
        
        return null;
    }

}
/* 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

///////////////////////////////////////////////////////////////////////////////
/**
 * a functor class of the application.
 * set the event handler of keyup.
 * 
 * @author hiroxpepe
 */
exmp.hangul.functor.event.KeyupEventClosure = {
    
    ///////////////////////////////////////////////////////////////////////////
    // public methods
    
    execute: function(obj) {
        console.log("exmp.hangul.functor.event.KeyupEventClosure#execute");
        
        var sentenceDivideTransformer = exmp.hangul.functor.value.SentenceDivideTransformer;
        var letterIdArrayTransformer = exmp.hangul.functor.value.LetterIdArrayTransformer;
        var decodedValueTransformer = exmp.hangul.functor.value.DecodedValueTransformer;
     
        // get the sentence.
        var sentence = obj.value;
        //console.log("sentence: " + sentence);
        
        // divide to array.
        var array = sentenceDivideTransformer.transform({
            value: sentence
        });
        
        // get the word as object.
        var text = "";
        for (var index in array) {
            //console.log("word: " + array[index]);

            var oneWord = array[index];
            
            // make a space.
            var sp = oneWord;
            if (sp == "") {
                //console.log("word is a space.");
                text = text + " ";
                continue;
            }

            // get the letter id value as a object.
            var idObjList = letterIdArrayTransformer.transform({
                value: oneWord
            });
            if (idObjList == null) {
                //console.log("not match word: " + oneWord);
                continue;
            }
            
            // loop..
            for (var i in idObjList) {
                
                var idObj = idObjList[i];
                if (idObj.remains != null) {
                    text = text + idObj.remains;
                }
                else {
                    // get the UTF-16 code.
                    var code = decodedValueTransformer.transform(
                        idObj
                    );
                    if (code == null) {
                        //console.log("not match word: " + oneWord);
                        // TODO: add
                        text = text + idObj.originalString;
                        continue;
                    }

                    // get the decoded string.
                    var decodedString = utf.packUTF16([code]);

                    // merge the text.
                    text = text + decodedString;
                }
            }
        }
        
        $("#tweet").val(text);
    }
}
/* 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

///////////////////////////////////////////////////////////////////////////////
/**
 * a functor class of the application.
 * set the event handler of the reply tweet.
 * 
 * @author hiroxpepe
 */
exmp.hangul.functor.event.ReplyEventClosure = {
    
    ///////////////////////////////////////////////////////////////////////////
    // public methods
    
    execute: function(obj) {
        console.log("exmp.hangul.functor.event.ReplyEventClosure#execute");
                       
        // dynamically generate an event handler.
        $("#action-reply-" + obj.statusId).click(function() {
             var userName = $("#action-reply-" + obj.statusId).attr("user-name");
             $("#reply-status-id").val(obj.statusId);
             $("#reply-user-name").val(userName);
             $("#tweet").val("@" + userName + " ");
             
             console.log("reply-status-id: " + obj.statusId);
             console.log("reply-user-name: " + userName);
        });
    }
}
/* 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

///////////////////////////////////////////////////////////////////////////////
/**
 * a functor class of the application.
 * set the event handler of the retweet tweet.
 * 
 * @author hiroxpepe
 */
exmp.hangul.functor.event.RetweetEventClosure = {
    
    ///////////////////////////////////////////////////////////////////////////
    // public methods
    
    execute: function(obj) {
        console.log("exmp.hangul.functor.event.RetweetEventClosure#execute");
        
        var retweetClosure = exmp.hangul.functor.request.TweetRetweetClosure;
               
        // dynamically generate an event handler.
        $("#action-retweet-" + obj.statusId).click(function() {
            retweetClosure.execute({
                userId: $("#user-id").val(),
                statusId: obj.statusId
            });
        });
    }
}
/* 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

///////////////////////////////////////////////////////////////////////////////
/**
 * a functor class of the application.
 * this class is a transformer that JSON data get by
 * Ajax HTTP requests and convert to HTML tables.
 * 
 * @author hiroxpepe
 */
exmp.hangul.functor.htmltag.TweetListTransformer = {
    
    ///////////////////////////////////////////////////////////////////////////
    // public methods
    
    transform: function(obj) {
        console.log("exmp.hangul.functor.htmltag.TweetListTransformer#transform");
        
        // set the user list name for the select.
        if (obj.userListNameList != null) {
            for (var h = 0; h < obj.userListNameList.length; h++) {
                //console.log(obj.userListNameList[h]);
                var listName = obj.userListNameList[h];
                $("#user-list-name").append(
                    $("<option value='" + listName +"'>" + listName + "</option>")
                );
                // TODO: set the value in this.?
            }
        }
        
        // dynamically generate an html table.
        var table = "<table class='tweet-list-table'>";
        if (obj.tweetModelList != null) {
            for (var i = 0; i < obj.tweetModelList.length; i++) {

                // get the value
                var image = obj.tweetModelList[i].userProfileImageURL;
                var name = obj.tweetModelList[i].userName;
                var text = obj.tweetModelList[i].text;
                var statusId = obj.tweetModelList[i].statusId;
                var isFavorited = obj.tweetModelList[i].isFavorited;

                // create an html tag and set the entry code.
                table +=
                    "<tr class='tweet-list-tr'>" +
                        "<td class='tweet-icon-td'>" + 
                            "<div class='tweet-icon'><img src='" + image + "' width='48' height='48' border='0'></div>" +
                        "</td>" +
                        "<td class='tweet-list-td' >" +
                            "<div>" + 
                                "<span><b>" + name + "</b></span>" + 
                                "<span id='action-reply-" + statusId + "' class='action-reply' status-id='" + statusId + "' user-name='" + name + "'>Reply</span>" +
                                "<span id='action-retweet-" + statusId + "' class='action-retweet' status-id='" + statusId + "' user-name='" + name + "'>Retweet</span>" +
                                "<span id='action-favorite-" + statusId + "' class='action-favorite' status-id='" + statusId + "' user-name='" + name + "'>Favorite</span>" +
                            "</div>" + 
                            "<span id='id-" + statusId + "'>" + text + "</span>" + 
                        "</td>" +
                    "</tr>";
            }
            table += "</table>";
        }
        return table;
    }
}
/* 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

///////////////////////////////////////////////////////////////////////////////
/**
 * a functor class of the application.
 * send HTTP request for the setting.
 * 
 * @author hiroxpepe
 */
exmp.hangul.functor.request.SettingClosure = {
    
    ///////////////////////////////////////////////////////////////////////////
    // public methods
    
    execute: function(obj) {
        console.log("setting begin.");
        
        // create an ajax object.
        new $.ajax({
            url: "setting.html",
            type: "POST",
            data: obj,
            dataType: "json",
            contentType: "application/json;charset=UTF-8",
            
            // callback function of the success.
            success: function(data, dataType) {
                
                // if get a error from the response.
                if (data.isError) {
                    console.log("application error occurred.");
                    return;
                }
            },
            
            // callback function of the error.
            error: function(XMLHttpRequest, textStatus, errorThrown) {
                
                // ** success in this class method. **
                // because, this ajax requests are redirected as normal.
                if (XMLHttpRequest.status == 200) {
                    console.log("setting complete.");
                    return;
                }
                
                console.log("http request error occurred.");
            }
        });
    }
}
/* 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

///////////////////////////////////////////////////////////////////////////////
/**
 * a functor class of the application.
 * send HTTP request for favorite action.
 * 
 * @author hiroxpepe
 */
exmp.hangul.functor.request.TweetFavorClosure = {
    
    ///////////////////////////////////////////////////////////////////////////
    // public methods
    
    execute: function(obj) {
        console.log("tweet favor begin.");
        
        new $.ajax({
            url: "favor.html",
            type: "POST",
            data: {
                user_id: obj.userId,
                status_id: obj.statusId
            },
            dataType: "json",
            
            // callback function of the success.
            success: function(data, dataType) {
                if (data.isError) {
                    console.log("application error occurred.");
                    return;
                }
                
                console.log("tweet favor complete.");
            },
            
            // callback function of the error.
            error: function(XMLHttpRequest, textStatus, errorThrown) {
                console.log("http request error occurred.");
            }
        });
    }
}

/* 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

///////////////////////////////////////////////////////////////////////////////
/**
 * a functor class of the application.
 * send HTTP request for get the tweet list.
 * 
 * @author hiroxpepe
 */
exmp.hangul.functor.request.TweetListClosure = {
    
    ///////////////////////////////////////////////////////////////////////////
    // public methods
    
    execute: function(obj) {
        console.log("tweet list begin.");
        
        var listUpdateClosure = exmp.hangul.functor.dhtml.TweetListUpdateClosure;
        var eventBuildClosure = exmp.hangul.functor.event.EventBuildClosure;
            
        // create an ajax object.
        new $.ajax({
            url: "list.html",
            type: "GET",
            data: {
                user_id: obj.userId
            },
            dataType: "json",
            
            // callback function of the success.
            success: function(data, dataType) {
                
                // if get a error from the response.
                if (data.isError) {
                    console.log("application error occurred.");
                    $("#tweet-list-block").html("");
                    return;
                }
                
                // update the HTML table of the tweet list.
                listUpdateClosure.execute(
                    data
                );
                
                // build the event of the tweet list.
                eventBuildClosure.execute(
                    data
                );
            
                console.log("tweet list complete.");
            },
            
            // callback function of the error.
            error: function(XMLHttpRequest, textStatus, errorThrown) {
                console.log("http request error occurred.");
                $("#tweet-list-block").html("");
            }
        });
    }
}
/* 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

///////////////////////////////////////////////////////////////////////////////
/**
 * a functor class of the application.
 * send HTTP request for reply post.
 * 
 * @author hiroxpepe
 */
exmp.hangul.functor.request.TweetReplyClosure = {
    
    ///////////////////////////////////////////////////////////////////////////
    // public methods
    
    execute: function(obj) {
        console.log("tweet reply begin.");
        
        var listUpdateClosure = exmp.hangul.functor.dhtml.TweetListUpdateClosure;
        var eventBuildClosure = exmp.hangul.functor.event.EventBuildClosure;
        
        new $.ajax({
            url: "reply.html",
            type: "POST",
            data: {
                tweet: obj.content,
                user_id: obj.userId,
                status_id: obj.statusId
            },
            dataType: "json",
            
            // callback function of the success.
            success: function(data, dataType) {
                if (data.isError) {
                    console.log("application error occurred.");
                    return;
                }
                
                // update the HTML table of the tweet list.
                listUpdateClosure.execute(
                    data
                );
                
                // build the event of the tweet list.
                eventBuildClosure.execute(
                    data
                );
                
                $("#reply-status-id").val("");
                $("#reply-user-name").val("");
                $("#tweet").val("");
                
                console.log("tweet reply complete.");
            },
            
            // callback function of the error.
            error: function(XMLHttpRequest, textStatus, errorThrown) {
                console.log("http request error occurred.");
            }
        });
    }
}

/* 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

///////////////////////////////////////////////////////////////////////////////
/**
 * a functor class of the application.
 * send HTTP request for retweet action.
 * 
 * @author hiroxpepe
 */
exmp.hangul.functor.request.TweetRetweetClosure = {
    
    ///////////////////////////////////////////////////////////////////////////
    // public methods
    
    execute: function(obj) {
        console.log("tweet retweet begin.");
        
        new $.ajax({
            url: "retweet.html",
            type: "POST",
            data: {
                user_id: obj.userId,
                status_id: obj.statusId
            },
            dataType: "json",
            
            // callback function of the success.
            success: function(data, dataType) {
                if (data.isError) {
                    console.log("application error occurred.");
                    return;
                }
                
                console.log("tweet retweet complete.");
            },
            
            // callback function of the error.
            error: function(XMLHttpRequest, textStatus, errorThrown) {
                console.log("http request error occurred.");
            }
        });
    }
}

/* 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

///////////////////////////////////////////////////////////////////////////////
/**
 * a functor class of the application.
 * send HTTP request for tweet post.
 * 
 * @author hiroxpepe
 */
exmp.hangul.functor.request.TweetUpdateClosure = {
    
    ///////////////////////////////////////////////////////////////////////////
    // public methods
    
    execute: function(obj) {
        console.log("tweet update begin.");
        
        var listUpdateClosure = exmp.hangul.functor.dhtml.TweetListUpdateClosure;
        var eventBuildClosure = exmp.hangul.functor.event.EventBuildClosure;
        
        new $.ajax({
            url: "update.html",
            type: "POST",
            data: {
                tweet: obj.content,
                user_id: obj.userId
            },
            dataType: "json",
            
            // callback function of the success.
            success: function(data, dataType) {
                if (data.isError) {
                    console.log("application error occurred.");
                    return;
                }

                // update the HTML table of the tweet list.
                listUpdateClosure.execute(
                    data
                );
                
                // build the event of the tweet list.
                eventBuildClosure.execute(
                    data
                );
                
                $("#tweet").val("");
                
                console.log("tweet update complete.");
            },
            
            // callback function of the error.
            error: function(XMLHttpRequest, textStatus, errorThrown) {
                console.log("http request error occurred.");
            }
        });
    }
}
/* 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

///////////////////////////////////////////////////////////////////////////////
/**
 * a functor class of the application.
 * get the decoded value.
 * 
 * @author hiroxpepe
 */
exmp.hangul.functor.value.DecodedValueTransformer = {
    
    ///////////////////////////////////////////////////////////////////////////
    // public methods
    
    transform: function(obj) {
        console.log("exmp.hangul.functor.value.DecodedValueTransformer#transform");
        
        if (obj.initialId == null) {
            //console.log("obj.initialId is null.");
            return null;
        }
        
        var initialId = obj.initialId;
        
        if (obj.peakId == null) {
            //console.log("obj.peakId is null.");
            return null;
        }
        
        var peakId = obj.peakId;
        
        var finalId;
        if (obj.finalId == null) {
            finalId = 0;
        } 
        else {
            finalId = obj.finalId;
        }
        
        //console.log("initialId: " + initialId);
        //console.log("peakId:" + peakId);
        //console.log("finalId:" + finalId);
        
        // get the UTF-16 code.
        var code = 0xAC00 + (initialId * 21 * 28) + (peakId * 28) + (finalId * 1);
        //console.log("code:" + code);
        
        return code;
    }
}
/* 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

///////////////////////////////////////////////////////////////////////////////
/**
 * a functor class of the application.
 * get the input char string.
 * 
 * @author hiroxpepe
 */
exmp.hangul.functor.value.InputValueTransformer = {
    
    _array: ["", "", ""],
    
    ///////////////////////////////////////////////////////////////////////////
    // public methods
    
    transform: function(obj) {
        console.log("exmp.hangul.functor.value.InputValueTransformer#transform");
        
        // reset array.
        if (obj.value === " ") {
            for (var i = 0; i < this._array.length; i++) {
                this._array[i] = "";
            }
            return null;
        }
        
        // shift the value..
        this._array[0] = this._array[1]
        this._array[1] = this._array[2]
        this._array[2] = obj.value;
              
        var ret = "";
        for (var i = 0; i < this._array.length; i++) {
            ret += this._array[i];
        }
        
        return ret;
    }
}
/* 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

///////////////////////////////////////////////////////////////////////////////
/**
 * a functor class of the application.
 * get the divided word string.
 * 
 * @author hiroxpepe
 */
exmp.hangul.functor.value.LetterIdArrayTransformer = {
    
    _initialArray: ["g","kk","n","d","tt","r","m","b","pp","s","ss","-","j","jj","ch","k","t","p","h"],
    _peakArray: ["a","ae","ya","yae","eo","e","yeo","ye","o","wa","wae","oe","yo","u","wo","we","wi","yu","eu","ui","i"],
    _finalArray: ["-","g","kk","ks","n","nj","nh","d","r","rg","rm","rb","rs","rt","rp","rh","m","b","bs","s","ss","ng","j","ch","k","t","p","h"],
    
    _remains: "",
    
    ///////////////////////////////////////////////////////////////////////////
    // public methods
    
    transform: function(obj) {
        console.log("exmp.hangul.functor.value.LetterIdArrayTransformer#transform");
        
        var LetterIdArray = [];
        
        var value = obj.value;
        var text = "";
        
        // TODO: this is still provisional..
        for (var i = 0; i < 50; i++) {
            
            // finally not match..
            if (i == 49) {
                var remains = this._remains;
                LetterIdArray[i] = {
                    initialId: null,
                    peakId: null,
                    finalId: null,
                    remains: remains
                };
                return LetterIdArray;
            }
            
            // the first word is processed.
            if (i == 0) {
                text = value;
            }
            // other is the rest 
            // that after the word has been processed.
            else {
                text = this._remains;
                // processing until the text is null.
                if (text == "") {
                    break;
                }
            }
            LetterIdArray[i] = this._getLetterId(text);
        }
        
        if (LetterIdArray[0] != null) {
            return LetterIdArray;
        }
        
        // else.
        return null;
    },
    
    ///////////////////////////////////////////////////////////////////////////
    // private methods
    
    _getLetterId: function(value) {
        //console.log(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>");
        //console.log("_getLetterId begin.");
        
        var initialId = null;
        var peakId = null;
        var finalId = null;
        
        var _initialStr = "";
        var _peakIdStr = "";
        var _finalIdStr = "";
        
        ///////////////////////////////////////////////////////////////////////
        // find the initial word.
        
        // if the initial word is two value.
        var initialStr2 = value.substr(0, 2);
        for (var initialIndex2 in this._initialArray) {
            if (initialStr2 == this._initialArray[initialIndex2]) {
                initialId = initialIndex2;
                _initialStr = initialStr2;
                value = value.substr(2);
                //console.log("-----------------------");
                //console.log("initialId: " + initialId);
                //console.log("peakId: " + peakId);
                //console.log("finalId: " + finalId);
            }
        }
        
        // if the initial word is one value.
        var initialStr1 = value.substr(0, 1);
        for (var initialIndex1 in this._initialArray) {
            if (initialStr1 == this._initialArray[initialIndex1]) {
                initialId = initialIndex1;
                _initialStr = initialStr1;
                value = value.substr(1);
                //console.log("-----------------------");
                //console.log("initialId: " + initialId);
                //console.log("peakId: " + peakId);
                //console.log("finalId: " + finalId);
            }
        }
        
        // if not found the initial word complemented to 11.
        if (initialId == null) {
            //console.log("initial word is not found.");
            //console.log("initial word is complemented to 11.");
            initialId = "11";
            _initialStr = "";
        }
        
        ///////////////////////////////////////////////////////////////////////
        // find the peak word.
        
        // if the peak word is three value.
        var peakStr3 = value.substr(0, 3);
        for (var peakIndex3 in this._peakArray) {
            if (peakStr3 == this._peakArray[peakIndex3]) {
                peakId = peakIndex3;
                _peakIdStr = peakStr3;
                value = value.substr(3);
                //console.log("-----------------------");
                //console.log("initialId: " + initialId);
                //console.log("peakId: " + peakId);
                //console.log("finalId: " + finalId);
            }
        }
        
        // if the peak word is two value.
        var peakStr2 = value.substr(0, 2);
        for (var peakIndex2 in this._peakArray) {
            if (peakStr2 == this._peakArray[peakIndex2]) {
                peakId = peakIndex2;
                _peakIdStr = peakStr2;
                value = value.substr(2);
                //console.log("-----------------------");
                //console.log("initialId: " + initialId);
                //console.log("peakId: " + peakId);
                //console.log("finalId: " + finalId);
            }
        }
        
        // if the peak word is one value.
        var peakStr1 = value.substr(0, 1);
        for (var peakIndex1 in this._peakArray) {
            if (peakStr1 == this._peakArray[peakIndex1]) {
                peakId = peakIndex1;
                _peakIdStr = peakStr1;
                value = value.substr(1);
                //console.log("-----------------------");
                //console.log("initialId: " + initialId);
                //console.log("peakId: " + peakId);
                //console.log("finalId: " + finalId);
            }
        }
        
        ///////////////////////////////////////////////////////////////////////
        // find the final word.
        
        // if the final word is two value.
        var finalStr2 = value.substr(0, 2);
        for (var finalIndex2 in this._finalArray) {
            if (finalStr2 == this._finalArray[finalIndex2]) {
                finalId = finalIndex2;
                _finalIdStr = finalStr2;
                value = value.substr(2);
                //console.log("-----------------------");
                //console.log("initialId: " + initialId);
                //console.log("peakId: " + peakId);
                //console.log("finalId: " + finalId);
            }
        }
        
        // if the final word is one value.
        var finalStr1 = value.substr(0, 1);
        for (var finalIndex1 in this._finalArray) {
            if (finalStr1 == this._finalArray[finalIndex1]) {
                finalId = finalIndex1;
                _finalIdStr = finalStr1;
                value = value.substr(1);
                //console.log("-----------------------");
                //console.log("initialId: " + initialId);
                //console.log("peakId: " + peakId);
                //console.log("finalId: " + finalId);
            }
        }
        
        this._remains = value;
        //console.log("=============================");
        //console.log("remains: " + value);
        
        // add
        var _originalString = _initialStr + _peakIdStr + _finalIdStr;
        //console.log("originalString: " + _originalString);
        //console.log("=============================");
                
        //console.log("_getLetterId end.");
        //console.log(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>");
        
        return {
            originalString: _originalString,
            initialId: initialId,
            peakId: peakId,
            finalId: finalId,
            remains: null
        };
    }
}
/* 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

///////////////////////////////////////////////////////////////////////////////
/**
 * a functor class of the application.
 * get the divided sentence string.
 * 
 * @author hiroxpepe
 */
exmp.hangul.functor.value.SentenceDivideTransformer = {
    
    ///////////////////////////////////////////////////////////////////////////
    // public methods
    
    transform: function(obj) {
        console.log("exmp.hangul.functor.value.SentenceDivideTransformer#transform");
        
        var value = obj.value;
        var array = value.split(" ");
        
        return array;
    }
}
/* 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

///////////////////////////////////////////////////////////////////////////////
/**
 * a functor class of the application.
 * get the value from the HTML form and 
 * create a JSON object for HTTP POST.
 * 
 * @author hiroxpepe
 */
exmp.hangul.functor.value.TweetFormFactory = {
    
    ///////////////////////////////////////////////////////////////////////////
    // public methods
    
    create: function() {
        // convert the form data to JSON.
        var param = {};
        $($("#tweet-form").serializeArray()).each(
            function(i, v) {
                param[v.name] = v.value;
            }
        );
        return $.toJSON(param);
    }
}
/* 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

///////////////////////////////////////////////////////////////////////////////
/**
 * called the main entry.
 * 
 * @author hiroxpepe
 */
new exmp.hangul.core.Application(
    this
);
/* 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

///////////////////////////////////////////////////////////////////////////////
/**
 * a simple class of the Hoge.
 * 
 * @author hiroxpepe
 */
exmp.hangul.mock.Hoge = function(name, age) {
    this.name = name;
    this.age = age;
}
exmp.hangul.mock.Hoge.prototype = {
    say : function () {
        console.log("my name " + this.name + " age is " + this.age);
    }
}
