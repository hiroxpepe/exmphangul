if (typeof exmp === "undefined") {
    var exmp = {}
}
if (typeof exmp.hangul === "undefined") {
    exmp.hangul = {}
}

if (typeof exmp.hangul.core === "undefined") {
    exmp.hangul.core = {}
}

if (typeof exmp.hangul.functor === "undefined") {
    exmp.hangul.functor = {}
}

if (typeof exmp.hangul.functor.event  === "undefined") {
    exmp.hangul.functor.event = {}
}
if (typeof exmp.hangul.functor.value  === "undefined") {
    exmp.hangul.functor.value = {}
}
/* 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

///////////////////////////////////////////////////////////////////////////////
/**
 * an entry class of the application.
 * 
 * @author hiroxpepe
 */
exmp.hangul.core.Application = function(sender) {
    $(document).ready(function() {
        sender.init();
    })
}

/* 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

///////////////////////////////////////////////////////////////////////////////
/**
 * a controller class of the application.
 * 
 * @author hiroxpepe
 */
exmp.hangul.core.Controller = window; {
    
    ///////////////////////////////////////////////////////////////////////////
    // public methods
    
    /**
     * the initialization method of the Controller class.
     * this method should be called.
     */
    exmp.hangul.core.Controller.init = function() {
        
        var controller = exmp.hangul.core.Controller;
        
        controller._initializeComponent();
    }
    
    ///////////////////////////////////////////////////////////////////////////
    // event handler methods
    
    
    ///////////////////////////////////////////////////////////////////////////
    // private methods
    
    /**
     * initialize a component of the view class.
     */
    exmp.hangul.core.Controller._initializeComponent = function() {
        
        var controller = exmp.hangul.core.Controller;
        var closure = exmp.hangul.functor.event.KeyupEventClosure;
        
        $("#roman").keyup(function(event) {            
            closure.execute({
                value: $("#roman").val()
            });
        });
    }
}
/* 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

///////////////////////////////////////////////////////////////////////////////
/**
 * a functor class of the application.
 * set the event handler of keyup.
 * 
 * @author hiroxpepe
 */
exmp.hangul.functor.event.KeyupEventClosure = {
    
    ///////////////////////////////////////////////////////////////////////////
    // public methods
    
    execute: function(obj) {
        console.log("exmp.hangul.functor.event.KeyupEventClosure#execute");
        
        var sentenceDivideTransformer = exmp.hangul.functor.value.SentenceDivideTransformer;
        //var letterIdTransformer = exmp.hangul.functor.value.LetterIdTransformer;
        var letterIdTransformer = exmp.hangul.functor.value.LetterIdArrayTransformer;
        var decodedValueTransformer = exmp.hangul.functor.value.DecodedValueTransformer;
     
        // get the sentence.
        var sentence = obj.value;
        console.log("sentence: " + sentence);
        
        // divide to array.
        var array = sentenceDivideTransformer.transform({
            value: sentence
        });
        
        // get the word as object.
        var text = "";
        for (var index in array) {
            console.log("word: " + array[index]);

            var oneWord = array[index];
            
            // make a space.
            var sp = oneWord;
            if (sp == "") {
                console.log("word is a space.");
                text = text + " ";
                continue;
            }

            // get the letter id value as a object.
            var letterIdObj = letterIdTransformer.transform({
                value: oneWord
            });
            if (letterIdObj == null) {
                console.log("not match word: " + oneWord);
                continue;
            }
            
            // loop..
            for (var i in letterIdObj) {
                
                // get the UTF-16 code.
                var code = decodedValueTransformer.transform(
                    letterIdObj[i]
                );
                if (code == null) {
                    console.log("not match word: " + oneWord);
                    continue;
                }
            
                // get the decoded string.
                var decodedString = utf.packUTF16([code]);

                // merge the text.
                text = text + decodedString;
            }
        }
        
        $("#hangul").val(text);
    }
}
/* 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

///////////////////////////////////////////////////////////////////////////////
/**
 * a functor class of the application.
 * set the event handler of keyup.
 * 
 * @author hiroxpepe
 */
exmp.hangul.functor.event.KeyupEventCodeClosure = {
    
    ///////////////////////////////////////////////////////////////////////////
    // public methods
    
    execute: function(obj) {
        console.log("exmp.hangul.functor.event.KeyupEventCodeClosure#execute");
         
        console.log("event.keyCode: "  + obj.keyCode);
        console.log("event.shiftKey: " + obj.shiftKey);
        console.log("event.ctrlKey: "  + obj.ctrlKey);
    }
}
/* 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

///////////////////////////////////////////////////////////////////////////////
/**
 * a functor class of the application.
 * get the decoded value.
 * 
 * @author hiroxpepe
 */
exmp.hangul.functor.value.DecodedValueTransformer = {
    
    ///////////////////////////////////////////////////////////////////////////
    // public methods
    
    transform: function(obj) {
        console.log("exmp.hangul.functor.value.DecodedValueTransformer#transform");
        
        if (obj.initialId == null) {
            console.log("obj.initialId is null.");
            return null;
        }
        
        var initialId = obj.initialId;
        
        if (obj.peakId == null) {
            console.log("obj.peakId is null.");
            return null;
        }
        
        var peakId = obj.peakId;
        
        var finalId;
        if (obj.finalId == null) {
            finalId = 0;
        } 
        else {
            finalId = obj.finalId;
        }
        
        console.log("initialId: " + initialId);
        console.log("peakId:" + peakId);
        console.log("finalId:" + finalId);
        
        // get the UTF-16 code.
        var code = 0xAC00 + (initialId * 21 * 28) + (peakId * 28) + (finalId * 1);
        console.log("code:" + code);
        
        return code;
    }
}
/* 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

///////////////////////////////////////////////////////////////////////////////
/**
 * a functor class of the application.
 * get the divided word string.
 * 
 * @author hiroxpepe
 */
exmp.hangul.functor.value.LetterIdArrayTransformer = {
    
    _initialArray: ["g","kk","n","d","tt","r","m","b","bb","s","ss","-","j","jj","c","k","t","p","h"],
    _peakArray: ["a","ae","ya","yae","eo","e","yeo","ye","o","wa","wae","oe","yo","u","weo","we","wi","yu","eu","yi","i"],
    _finalArray: ["-","g","kk","ks","n","nj","nh","d","r","rg","rm","rb","rs","rt","rp","rh","m","b","bs","s","ss","ng","j","c","k","t","p","h"],
    
    _remains: "",
    
    ///////////////////////////////////////////////////////////////////////////
    // public methods
    
    transform: function(obj) {
        console.log("exmp.hangul.functor.value.LetterIdArrayTransformer#transform");
        
        var LetterIdArray = [];
        
        var value = obj.value;
        var text = "";
        
        // loop..
        for (var i = 0; i < 50; i++) {
            if (i == 0) {
                text = value;
            }
            else {
                text = this._remains;
                if (text == "") {
                    break;
                }
            }
            LetterIdArray[i] = this._getLetterId(text);
        }
        
        if (LetterIdArray[0] != null) {
            return LetterIdArray;
        }
        
        return null;
    },
    
    ///////////////////////////////////////////////////////////////////////////
    // private methods
    
    _getLetterId: function(value) {
        
        var initialId = null;
        var peakId = null;
        var finalId = null;
        
        ///////////////////////////////////////////////////////////////////////
        // find the initial word.
        
        // if the initial word is two value.
        var initialStr2 = value.substr(0, 2);
        for (var initialIndex2 in this._initialArray) {
            if (initialStr2 == this._initialArray[initialIndex2]) {
                initialId = initialIndex2;
                value = value.substr(2);
                console.log("initialId: " + initialId);
            }
        }
        
        // if the initial word is one value.
        var initialStr1 = value.substr(0, 1);
        for (var initialIndex1 in this._initialArray) {
            if (initialStr1 == this._initialArray[initialIndex1]) {
                initialId = initialIndex1;
                value = value.substr(1);
                console.log("initialId: " + initialId);
            }
        }
        
        // if not found the initial word complemented to 11.
        if (initialId == null) {
            console.log("initial word is not found.");
            console.log("initial word is complemented to 11.");
            initialId = 11;
        }
        
        ///////////////////////////////////////////////////////////////////////
        // find the peak word.
        
        // if the peak word is three value.
        var peakStr3 = value.substr(0, 3);
        for (var peakIndex3 in this._peakArray) {
            if (peakStr3 == this._peakArray[peakIndex3]) {
                peakId = peakIndex3;
                value = value.substr(3);
                console.log("peakId: " + peakId);
            }
        }
        
        // if the peak word is two value.
        var peakStr2 = value.substr(0, 2);
        for (var peakIndex2 in this._peakArray) {
            if (peakStr2 == this._peakArray[peakIndex2]) {
                peakId = peakIndex2;
                value = value.substr(2);
                console.log("peakId: " + peakId);
            }
        }
        
        // if the peak word is one value.
        var peakStr1 = value.substr(0, 1);
        for (var peakIndex1 in this._peakArray) {
            if (peakStr1 == this._peakArray[peakIndex1]) {
                peakId = peakIndex1;
                value = value.substr(1);
                console.log("peakId: " + peakId);
            }
        }
        
        ///////////////////////////////////////////////////////////////////////
        // find the final word.
        
        // if the final word is two value.
        var finalStr2 = value.substr(0, 2);
        for (var finalIndex2 in this._finalArray) {
            if (finalStr2 == this._finalArray[finalIndex2]) {
                finalId = finalIndex2;
                value = value.substr(2);
                console.log("finalId: " + finalId);
            }
        }
        
        // if the final word is one value.
        var finalStr1 = value.substr(0, 1);
        for (var finalIndex1 in this._finalArray) {
            if (finalStr1 == this._finalArray[finalIndex1]) {
                finalId = finalIndex1;
                value = value.substr(1);
                console.log("finalId: " + finalId);
            }
        }
        
        this._remains = value;
        console.log("_remains: " + value);
        
        return {
            initialId: initialId,
            peakId: peakId,
            finalId: finalId
        };
    }
}
/* 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

///////////////////////////////////////////////////////////////////////////////
/**
 * a functor class of the application.
 * get the divided word string.
 * 
 * @author hiroxpepe
 */
exmp.hangul.functor.value.LetterIdTransformer = {
    
    ///////////////////////////////////////////////////////////////////////////
    // public methods
    
    transform: function(obj) {
        console.log("exmp.hangul.functor.value.LetterIdTransformer#transform");
        
        var value = obj.value;
        
        var initialArray = ["g","kk","n","d","tt","r","m","b","bb","s","ss","-","j","jj","c","k","t","p","h"];
        var peakArray = ["a","ae","ya","yae","eo","e","yeo","ye","o","wa","wae","oe","yo","u","weo","we","wi","yu","eu","yi","i"];
        var finalArray = ["-","g","kk","ks","n","nj","nh","d","r","rg","rm","rb","rs","rt","rp","rh","m","b","bs","s","ss","ng","j","c","k","t","p","h"];
        
        var initialId = null;
        var peakId = null;
        var finalId = null;
        
        ///////////////////////////////////////////////////////////////////////
        // find the initial word.
        
        // if the initial word is two value.
        var initialStr2 = value.substr(0, 2);
        for (var initialIndex2 in initialArray) {
            if (initialStr2 == initialArray[initialIndex2]) {
                initialId = initialIndex2;
                value = value.substr(2);
                console.log("initialId: " + initialId);
            }
        }
        
        // if the initial word is one value.
        var initialStr1 = value.substr(0, 1);
        for (var initialIndex1 in initialArray) {
            if (initialStr1 == initialArray[initialIndex1]) {
                initialId = initialIndex1;
                value = value.substr(1);
                console.log("initialId: " + initialId);
            }
        }
        
        // if not found the initial word complemented to 11.
        if (initialId == null) {
            console.log("initial word is not found.");
            console.log("initial word is complemented to 11.");
            initialId = 11;
        }
        
        ///////////////////////////////////////////////////////////////////////
        // find the peak word.
        
        // if the peak word is three value.
        var peakStr3 = value.substr(0, 3);
        for (var peakIndex3 in peakArray) {
            if (peakStr3 == peakArray[peakIndex3]) {
                peakId = peakIndex3;
                value = value.substr(3);
                console.log("peakId: " + peakId);
            }
        }
        
        // if the peak word is two value.
        var peakStr2 = value.substr(0, 2);
        for (var peakIndex2 in peakArray) {
            if (peakStr2 == peakArray[peakIndex2]) {
                peakId = peakIndex2;
                value = value.substr(2);
                console.log("peakId: " + peakId);
            }
        }
        
        // if the peak word is one value.
        var peakStr1 = value.substr(0, 1);
        for (var peakIndex1 in peakArray) {
            if (peakStr1 == peakArray[peakIndex1]) {
                peakId = peakIndex1;
                value = value.substr(1);
                console.log("peakId: " + peakId);
            }
        }
        
        ///////////////////////////////////////////////////////////////////////
        // find the final word.
        
        // if the final word is two value.
        var finalStr2 = value.substr(0, 2);
        for (var finalIndex2 in finalArray) {
            if (finalStr2 == finalArray[finalIndex2]) {
                finalId = finalIndex2;
                value = value.substr(2);
                console.log("finalId: " + finalId);
            }
        }
        
        // if the final word is one value.
        var finalStr1 = value.substr(0, 1);
        for (var finalIndex1 in finalArray) {
            if (finalStr1 == finalArray[finalIndex1]) {
                finalId = finalIndex1;
                value = value.substr(1);
                console.log("finalId: " + finalId);
            }
        }
        
        return {
            initialId: initialId,
            peakId: peakId,
            finalId: finalId
        };
    }
}
/* 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

///////////////////////////////////////////////////////////////////////////////
/**
 * a functor class of the application.
 * get the divided sentence string.
 * 
 * @author hiroxpepe
 */
exmp.hangul.functor.value.SentenceDivideTransformer = {
    
    ///////////////////////////////////////////////////////////////////////////
    // public methods
    
    transform: function(obj) {
        console.log("exmp.hangul.functor.value.SentenceDivideTransformer#transform");
        
        var value = obj.value;
        var array = value.split(" ");
        
        return array;
    }
}
/* 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

///////////////////////////////////////////////////////////////////////////////
/**
 * called the main entry.
 * 
 * @author hiroxpepe
 */
new exmp.hangul.core.Application(
    this
);

